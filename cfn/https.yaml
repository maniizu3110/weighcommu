# ---------------- 前提 ----------------------
# 対象のEC2は既に作成済
# Route53でドメイン取得、ホストゾーン作成が完了済
# --------------------------------------------
# ---------------- 注意点 ----------------------
# スタックを削除してもRoute53のCNAMEは削除されない
# 手動で削除する必要がある
# --------------------------------------------
Description: Create new ALB, ACM, SG, https
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: 'test'
  VPCID:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id
    Default: 'vpc-xxx'
  PrimarySubnet:
    Description: PrimarySubnet ID
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxx'
  SecondarySubnet:
    Description: SecondarySubnet ID(* for load balancer)
    Type: AWS::EC2::Subnet::Id
    Default: 'subnet-xxx'
  AllowIP:
    Description: IP Address for Loadbalancer's SG
    Type: String
    Default: '0.0.0.0/0'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP range of the form x.x.x.x/x"
  EC2InstanceID:
    Description: EC2 Instance ID
    Type: AWS::EC2::Instance::Id
    Default: 'i-xxx'
  HostZoneId:
    Description: FQDN of the hosted zone
    Type: AWS::Route53::HostedZone::Id
    Default: 'Z0xxx'
  DomainName:
    Description: FQDN of the HostZone
    Type: String
    Default: 'example.com'
  SubDomain:
    Description: FQDN of the certificate
    Type: String
    Default: 'test.example.com'
Resources:
  SGloadbalancer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${EnvironmentName}-alb-sg
      GroupDescription: !Sub ${EnvironmentName}-alb-sg
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AllowIP
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg
  TargetGroup: 
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties: 
      VpcId: !Ref VPCID
      Name: !Sub ${EnvironmentName}-tg
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      HealthCheckPort: "traffic-port"
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher: 
        HttpCode: 200
      Targets: 
        - Id: !Ref EC2InstanceID
          Port: 80
  ALB: 
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties: 
      Name: !Sub ${EnvironmentName}-alb
      Scheme: "internet-facing"
      LoadBalancerAttributes: 
        - Key: "deletion_protection.enabled"
          Value: false
        - Key: "idle_timeout.timeout_seconds"
          Value: 4000
      SecurityGroups:
        - !Ref SGloadbalancer
      Subnets: 
        - !Ref PrimarySubnet
        - !Ref SecondarySubnet
  ALBListenerHTTP: 
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties: 
      Port: 80
      Protocol: HTTP
      DefaultActions: 
        - Type: redirect
          RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: 443
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ALB
  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACM
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub '${HostZoneId}'
      Comment: "DNS for ALB"
      Name: !Sub '${SubDomain}'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'ALB.CanonicalHostedZoneID'
        DNSName: !GetAtt 'ALB.DNSName'
  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${SubDomain}'
      DomainValidationOptions:
        - DomainName: !Sub '${SubDomain}'
          HostedZoneId: !Sub '${HostZoneId}'
      ValidationMethod: DNS